site_name: DeepChain Knowledge Layer
site_author: LimitlessLedger
copyright: Copyright &copy; 2024 LimitlessLedger
repo_name: DeepChain Knowledge Layer
repo_url: https://github.com/LimitlessLedger/deepchain-docs
edit_uri: edit/main/docs/
site_url: https://docs.limitlessledger.com/

theme:
  name: material
  palette:
    - scheme: default
      primary: white
      accent: purple
      toggle:
        icon: material/eye
        name: Switch to dark mode
    - scheme: slate
      primary: black
      accent: purple
      toggle:
        icon: material/eye-outline
        name: Switch to light mode
  language: en
  custom_dir: overrides
  favicon: img/favicon.ico
  icon:
    logo: logo
    repo: repo
  features:
    - search.suggest
    - search.highlight
    - search.share
    - navigation.tracking
    - navigation.integration
    - navigation.tabs
    - navigation.tabs.sticky
    - navigation.indexes
    - navigation.sections
    - navigation.path
    - navigation.top
    - navigation.footer
    - toc.follow
    - content.code.copy
    - content.action.edit

nav:
  - Home: index.md
  - zkEVM:
      - Overview: zkEVM/overview.md
      - Get started:
        - Quick start: zkEVM/get-started/quick-start.md
        - Setup nodes:
          - Setup local zkNode: zkEVM/get-started/setup-nodes/local-node.md
          - Setup production zkNode: zkEVM/get-started/setup-nodes/production-node.md
          - Deploy zkEVM:
              - Introduction: zkEVM/get-started/setup-nodes/deploy-zkevm/intro.md
              - Environment overview: zkEVM/get-started/setup-nodes/deploy-zkevm/environment-overview.md
              - Prerequisites: zkEVM/get-started/setup-nodes/deploy-zkevm/prerequisites.md
              - Install dependencies: zkEVM/get-started/setup-nodes/deploy-zkevm/install-dependencies.md
              - Create wallets: zkEVM/get-started/setup-nodes/deploy-zkevm/create-wallets.md
              - Configure node deployment: zkEVM/get-started/setup-nodes/deploy-zkevm/configure-node-deployment.md
              - Configure prover: zkEVM/get-started/setup-nodes/deploy-zkevm/configure-prover.md
              - Start node: zkEVM/get-started/setup-nodes/deploy-zkevm/start-node.md
              - Start services: zkEVM/get-started/setup-nodes/deploy-zkevm/start-services.md
      - How to:
        - Write a contract: zkEVM/how-to/write-contract.md
        - Deploy a contract with Foundry: zkEVM/how-to/using-foundry.md
        - Deploy a contract with Hardhat: zkEVM/how-to/using-hardhat.md
        - Verify a contract: zkEVM/how-to/verify-contract.md
      - Architecture high-level:
        - Architectural overview: zkEVM/architecture/high-level/overview.md
        - Bridge service: zkEVM/architecture/high-level/bridge-service.md
      - zkNode: zkEVM/architecture/zknode/index.md
      - Data streamer:
        - Overall design: zkEVM/architecture/data-streamer/data-streamer-design.md
        - Data streamer protocols: zkEVM/architecture/data-streamer/data-streamer-protocols.md
        - Bookmarks: zkEVM/architecture/data-streamer/bookmarks.md
        - Protocol messages: zkEVM/architecture/data-streamer/client-server-messages.md
        - Stream file: zkEVM/architecture/data-streamer/stream-file.md
        - How rollbacks work: zkEVM/architecture/data-streamer/how-rollbacks-work.md
      - The proving system:
        - Introduction: zkEVM/architecture/proving-system/intro-proving-sys.md
        - Executor: zkEVM/architecture/proving-system/the-executor-comp.md
        - Polynomial identity language: zkEVM/architecture/proving-system/polynom-identity-lang.md
        - Execution trace design: zkEVM/architecture/proving-system/execution-trace-design.md
        - Selector columns: zkEVM/architecture/proving-system/exec-selector-columns.md
        - zkEVM and execution traces: zkEVM/architecture/proving-system/exec-trace-and-zkevm.md
        - Using lookup tables: zkEVM/architecture/proving-system/secondary-sms-lookup-tables.md
        - Recapitulation: zkEVM/architecture/proving-system/prover-and-verifier-recap.md
      - zkProver:
        - zkProver: zkEVM/architecture/zkprover/index.md
        - Main state machine: 
          - Main state machine: zkEVM/architecture/zkprover/main-state-machine/index.md
          - As a processor: zkEVM/architecture/zkprover/main-state-machine/processor.md
        - STARK recursion:
          - STARK recursion: zkEVM/architecture/zkprover/stark-recursion/index.md
          - Proving tools and techniques: zkEVM/architecture/zkprover/stark-recursion/proving-tools.md
          - Composition, Recursion and Aggregation: zkEVM/architecture/zkprover/stark-recursion/composition-recursion-aggregation.md
          - Recursion sub-process: zkEVM/architecture/zkprover/stark-recursion/recursion-sub-process.md
          - Proving architecture: zkEVM/architecture/zkprover/stark-recursion/proving-architecture.md
          - CIRCOM in zkProver: zkEVM/architecture/zkprover/stark-recursion/circom-in-zkprover.md
          - Proving setup phase: zkEVM/architecture/zkprover/stark-recursion/proving-setup-phase.md
          - Intermediate steps: zkEVM/architecture/zkprover/stark-recursion/intermediate-recursion.md
          - Final recursion step: zkEVM/architecture/zkprover/stark-recursion/final-recursion-step.md
          - Proof generation phase: zkEVM/architecture/zkprover/stark-recursion/proof-generation-phase.md
        - Storage state machine:
          - Storage state machine: zkEVM/architecture/zkprover/storage-state-machine/index.md
          - Creating keys and paths: zkEVM/architecture/zkprover/storage-state-machine/construct-key-path.md
          - Storage SM mechanism: zkEVM/architecture/zkprover/storage-state-machine/mechanism.md
          - Executor and PIL: zkEVM/architecture/zkprover/storage-state-machine/executor-pil.md
        - Arithmetic state machine: zkEVM/architecture/zkprover/arithmetic-sm.md
        - Binary state machine: zkEVM/architecture/zkprover/binary-sm.md
        - Memory state machine: zkEVM/architecture/zkprover/memory-sm.md
        - Memory-Align state machine: zkEVM/architecture/zkprover/mem-align-sm.md
        - Hashing state machines:
          - Hashing state machines: zkEVM/architecture/zkprover/hashing-state-machines/index.md
          - Keccak framework: zkEVM/architecture/zkprover/hashing-state-machines/keccak-framework.md
          - Padding-kk state machine: zkEVM/architecture/zkprover/hashing-state-machines/paddingkk-sm.md
          - Padding-kk-bit state machine: zkEVM/architecture/zkprover/hashing-state-machines/paddingkk-bit-sm.md
          - Bits2Field state machine: zkEVM/architecture/zkprover/hashing-state-machines/bits2field-sm.md
          - Keccak-f state machine: zkEVM/architecture/zkprover/hashing-state-machines/keccakf-sm.md
          - Poseidon state machine: zkEVM/architecture/zkprover/hashing-state-machines/poseidon-sm.md
      - Specification:
        - Polynomial Identity Language:
          - Polynomial Identity Language: zkEVM/spec/pil/index.md
          - Simple example: zkEVM/spec/pil/simple-example.md
          - Modular programs: zkEVM/spec/pil/modular-programs.md
          - Connection arguments: zkEVM/spec/pil/connection-arguments.md
          - Cyclicity in PIL: zkEVM/spec/pil/cyclicity-in-pil.md
          - Filling polynomials: zkEVM/spec/pil/filling-polynomials.md
          - Generating proofs: zkEVM/spec/pil/generating-proofs.md
          - Permutation arguments: zkEVM/spec/pil/permutation-arguments.md
          - Inclusion arguments: zkEVM/spec/pil/inclusion-arguments.md
          - Compiling using PILCOM: zkEVM/spec/pil/compiling-using-pilcom.md
          - Configuration files: zkEVM/spec/pil/configuration-files.md
          - PLONK in PIL: zkEVM/spec/pil/plonk-in-pil.md
          - Public values: zkEVM/spec/pil/public-values.md
        - zkASM:
          - zkASM: zkEVM/spec/zkasm/index.md
          - Basic Syntax: zkEVM/spec/zkasm/basic-syntax.md
          - Examples: zkEVM/spec/zkasm/examples.md
        - EVM vs. zkEVM: zkEVM/spec/evm-differences.md
      - API: 
        - JSON RPC endpoints: zkEVM/api/json-rpc.md
      - Concepts:
        - Concepts: zkEVM/concepts/index.md
        - EVM basics: zkEVM/concepts/evm-basics.md
        - Sparse merkle trees:
          - Merkle trees: zkEVM/concepts/sparse-merkle-trees/sparse-merkle-tree.md
          - Constructing simple SMTs: zkEVM/concepts/sparse-merkle-trees/simple-smt.md
          - SMT concepts: zkEVM/concepts/sparse-merkle-trees/detailed-smt.md
          - Operations on SMTs: zkEVM/concepts/sparse-merkle-trees/basic-smt-ops.md
        - mFibonnaci state machine:
          - Design approach: zkEVM/concepts/mfibonacci/mfibonacci.md
          - An example: zkEVM/concepts/mfibonacci/mfibonacci-example.md
          - Commitment scheme: zkEVM/concepts/mfibonacci/commitment-scheme.md
          - Verification scheme: zkEVM/concepts/mfibonacci/verification-scheme.md
          - PIL-STARK process: zkEVM/concepts/mfibonacci/pil-stark.md
          - PIL-STARK demo: zkEVM/concepts/mfibonacci/pil-stark-demo.md
        - Generic state machine: 
          - Generic SM introduction: zkEVM/concepts/generic-state-machine/intro-generic-sm.md
          - Execution trace: zkEVM/concepts/generic-state-machine/exec-trace-correct.md
          - Ending programs: zkEVM/concepts/generic-state-machine/ending-program.md
          - Program counter: zkEVM/concepts/generic-state-machine/program-counter.md
          - Plookup: zkEVM/concepts/generic-state-machine/plookup.md
        - CIRCOM: zkEVM/concepts/circom-intro-brief.md
      - Troubleshooting:
        - Disclosures: zkEVM/troubleshooting/risk-disclosures.md
  - Developer Tools:
      - dApp development: 
          - dApp Launchpad:
              - Introduction: tools/dApp-development/launchpad/intro.md
              - Quickstart: tools/dApp-development/launchpad/quickstart.md
              - Frontend: tools/dApp-development/launchpad/frontend.md
              - Smart contracts: tools/dApp-development/launchpad/smart-contracts.md
              - Commands: tools/dApp-development/launchpad/commands.md
              - Contributing: tools/dApp-development/launchpad/contributing.md
              - Common pitfalls: tools/dApp-development/launchpad/common-pitfalls.md
          - Common tools:
              - Hardhat: tools/dApp-development/common-tools/hardhat.md
              - Remix: tools/dApp-development/common-tools/remix.md
              - Replit: tools/dApp-development/common-tools/replit.md
          - Smart contract development: tools/dApp-development/pos/third-party-smart-contracts.md
      - Chain indexer framework:
          - Overview: tools/chain-indexer-framework/overview.md
          - Usage: tools/chain-indexer-framework/usage.md
      - Data:
          - Alchemy subgraphs: https://docs.alchemy.com/docs/how-to-build-and-deploy-a-subgraph-on-polygon-zkevm-using-alchemy-subgraphs
          - Covalent: tools/data/covalent.md
          - Envio: tools/data/envio.md
          - Flair: tools/data/flair.md
          - Moralis: tools/data/moralis.md
          - PARSIQ: tools/data/parsiq.md
          - SubQuery: tools/data/subquery.md
      - Matic.js:
          - Installation:  tools/matic-js/installation.md
          - Get started:  tools/matic-js/get-started.md
          - zkEVM:
              - zkEVM client:  tools/matic-js/zkevm/initialize.md
              - ERC20:  tools/matic-js/zkevm/erc20.md
              - Message passing: tools/matic-js/zkevm/message-passing.md
              - Common methods:  tools/matic-js/zkevm/common-methods.md
      - Storage: 
          - IPFS: tools/storage/ipfs.md
          - Filecoin: tools/storage/filecoinhelpers.md
          - Crust network: tools/storage/crusthelpers.md
      - Oracles:
          - Getting started: tools/oracles/getting-started.md
          - API3: tools/oracles/api3.md
          - Bandchain: tools/oracles/bandchain.md
          - Band standard dataset: tools/oracles/bandstandarddataset.md
          - Chainlink: tools/oracles/chainlink.md
          - DIA: tools/oracles/diadataoracles.md
          - Pyth: tools/oracles/pyth.md
          - Razor: tools/oracles/razor.md
          - Supra: tools/oracles/supra.md
          - Tellor: tools/oracles/tellor.md
          - UMA optimistic oracle: tools/oracles/optimisticoracle.md
          - Umbrella: tools/oracles/umbrella.md
      - Wallets:
          - Getting started:  tools/wallets/getting-started.md
          - Polygon Portal: tools/wallets/portal.md
          - Metamask:
              - Overview: tools/wallets/metamask/index.md
              - Create MetaMask wallet: tools/wallets/metamask/create-metamask-wallet.md
              - Add Polygon network:  tools/wallets/metamask/add-polygon-network.md
              - Configure custom tokens:  tools/wallets/metamask/custom-tokens.md
              - Create and import accounts:  tools/wallets/metamask/multiple-accounts.md
          - Venly:
              - Intro:  tools/wallets/venly/index.md
              - Create Venly wallet:  tools/wallets/venly/create-wallet.md
              - Venly wallet API:  tools/wallets/venly/wallet-api.md
              - Venly widget: tools/wallets/venly/venly-widget.md
          - Fortmatic: tools/wallets/fortmatic.md    
          - Openfort: tools/wallets/openfort.md
          - Particle network:  tools/wallets/particle-network.md
          - Portis:  tools/wallets/portis.md    
          - SlashAuth:  tools/wallets/slashauth.md
          - Torus:  tools/wallets/torus.md  
          - WalletKit:  tools/wallets/walletkit.md
          - Wallet link: tools/wallets/wallet-link.md
          - WalletConnect:  tools/wallets/walletconnect.md
          - Web3Modal: tools/wallets/using-web3modal.md
      - Block explorers:
          - Polygon: https://polygonscan.com/ 
          - zkEVM: https://zkevm.polygonscan.com/
          - zkEVM testnet: https://testnet-zkevm.polygonscan.com/
          - OKLink: https://www.oklink.com/polygon
  - Learn:
      - Welcome: learn/welcome.md
      - Polygon type 1 prover:
          - Introduction and definitions: cdk/architecture/type-1-prover/intro-t1-prover.md
          - How to:
              - Run prover quickly: cdk/how-to/deploy-t1-prover.md
              - Deploy prover on devnet: cdk/how-to/deploy-t1-prover-devnet.md
          - Architecture:
              - Overview: cdk/architecture/type-1-prover/t1-architecture.md
              - Type 1 design challenges: cdk/architecture/type-1-prover/t1-design-challenge.md
              - Tests and proving costs: cdk/architecture/type-1-prover/testing-and-proving-costs.md
          - Specification:
              - CPU component: cdk/architecture/type-1-prover/t1-cpu-component.md
              - CTL protocol: cdk/architecture/type-1-prover/t1-ctl-protocol.md
              - Range checks: cdk/architecture/type-1-prover/t1-rangechecks.md
      - Plonky 2 & 3: learn/plonky.md
      - Polygon protocols: learn/polygon-protocols.md
      - Demystifying reorgs: https://polygon.technology/blog/reorgs-demystified-insights-from-monitoring-with-a-sensor-network

extra:
  generator: false
  analytics:
    provider: custom
    property: google    
  social:
    - icon: fontawesome/solid/circle-question
      link: https://support.polygon.technology/support/solutions
    - icon: fontawesome/solid/globe
      link: https://polygon.technology/
    - icon: fontawesome/brands/github
      link: https://github.com/LimitlessLedger/deepchain-docs
  consent:
    title: Cookie consent
    description: >-
      We use cookies to recognize your repeated visits and preferences, as well
      as to measure the effectiveness of our documentation and whether users
      find what they're searching for. With your consent, you're helping us to
      make our documentation better.

extra_css:
  - _site_essentials/stylesheets/extra.css
  - https://fonts.googleapis.com/icon?family=Material+Icons
  - https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.16.7/katex.min.css

markdown_extensions:
  - toc:
      permalink: true
      permalink_title: Link to this section
      toc_depth: 4
  - codehilite
  - markdown_include.include:
      base_path: docs
  - admonition
  - footnotes
  - def_list
  - attr_list
  - abbr
  - pymdownx.tabbed
  - pymdownx.superfences
  - pymdownx.arithmatex:
      generic: true
  - pymdownx.betterem:
      smart_enable: all
  - pymdownx.keys
  - pymdownx.details
  - pymdownx.magiclink
  - pymdownx.mark
  - pymdownx.smartsymbols
  - pymdownx.tasklist:
      custom_checkbox: true
  - pymdownx.tilde
  - pymdownx.caret
  - meta
  - smarty
  - pymdownx.extra

plugins:
  - search
  - open-in-new-tab

validation:
  absolute_links: warn

extra_javascript:
  - _site_essentials/js/mathjax.js
  - https://polyfill.io/v3/polyfill.min.js?features=es6
  - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js
  - https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.16.7/katex.min.js  
  - https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.16.7/contrib/auto-render.min.js
